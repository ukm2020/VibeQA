"""Cypress framework adapter."""

from typing import Dict, Any, List
from .base import FrameworkAdapter


class CypressAdapter(FrameworkAdapter):
    """Adapter for Cypress test format."""
    
    @property
    def framework_name(self) -> str:
        return "cypress"
    
    def get_file_extension(self) -> str:
        return ".cy.js"
    
    def convert(self, test_json: Dict[str, Any]) -> str:
        """
        Convert test JSON to Cypress format.
        
        Args:
            test_json: The validated test JSON object
            
        Returns:
            Cypress test file content
        """
        title = test_json['title']
        description = test_json['description']
        steps = test_json['steps']
        base_url = test_json['environment']['base_url']
        variables = test_json.get('variables', [])
        
        # Start building the Cypress test
        lines = [
            f"// {description}",
            f"// Generated by VibeQA Generator",
            "",
            f"describe('{title}', () => {{",
            f"  const baseUrl = '{base_url}';",
        ]
        
        # Add variables if any
        if variables:
            lines.append("")
            lines.append("  // Test variables")
            for var in variables:
                lines.append(f"  const {var['name']} = '{var['value']}';")
        
        lines.extend([
            "",
            f"  it('should {title.lower()}', () => {{",
        ])
        
        # Convert each step
        for i, step in enumerate(steps):
            step_lines = self._convert_step(step, i + 1)
            for line in step_lines:
                lines.append(f"    {line}")
        
        lines.extend([
            "  });",
            "});"
        ])
        
        return "\n".join(lines)
    
    def _convert_step(self, step: Dict[str, Any], step_number: int) -> List[str]:
        """Convert a single step to Cypress commands."""
        action = step['action']
        expected_result = step['expected_result']
        lines = [f"// Step {step_number}: {expected_result}"]
        
        if action == 'navigate':
            target = step['target']
            if target.startswith('http'):
                lines.append(f"cy.visit('{target}');")
            else:
                lines.append(f"cy.visit(baseUrl + '{target}');")
                
        elif action == 'wait_for_element':
            selector = step['selector']
            timeout = step.get('timeout_seconds', 10) * 1000  # Convert to ms
            lines.append(f"cy.get('{selector}', {{ timeout: {timeout} }}).should('exist');")
            
        elif action == 'type':
            selector = step['selector']
            value = step['value']
            lines.append(f"cy.get('{selector}').type('{value}');")
            
        elif action == 'click':
            selector = step['selector']
            lines.append(f"cy.get('{selector}').click();")
            
        elif action == 'assert_element_text':
            selector = step['selector']
            match_type = step['match']
            value = step['value']
            
            if match_type == 'equals':
                lines.append(f"cy.get('{selector}').should('have.text', '{value}');")
            elif match_type == 'contains':
                lines.append(f"cy.get('{selector}').should('contain.text', '{value}');")
            elif match_type == 'regex':
                lines.append(f"cy.get('{selector}').should('match', /{value}/);")
                
        elif action == 'assert_element_visible':
            selector = step['selector']
            lines.append(f"cy.get('{selector}').should('be.visible');")
            
        elif action == 'assert_no_navigation':
            lines.append("cy.url().should('eq', Cypress.config().baseUrl + Cypress.env('currentPath'));")
            
        elif action == 'open_new_tab':
            target = step['target']
            lines.append(f"// Note: Cypress doesn't support multiple tabs. Consider using cy.window().then(win => win.open('{target}'));")
            
        elif action == 'switch_to_new_tab':
            lines.append("// Note: Cypress doesn't support tab switching. Test should be redesigned for single tab.");
        
        lines.append("")  # Add blank line after each step
        return lines

